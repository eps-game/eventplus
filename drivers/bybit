#!/usr/bin/env node

/**
 * Established in March 2018, Bybit is one of the fastest growing cryptocurrency derivatives exchanges,
 * with more than a million registered users. Built on customer-centric values, we endeavor to provide a professional,
 * smart, intuitive and innovative trading experience to better serve our customers in a timely manner.
 * We are committed to creating a fair, transparent and efficient trading environment, and offer 24/7 multi-language
 * support as part of our service.
 *
 * Products currently offered on the Bybit platform include BTC/USD, ETH/USD, XRP/USD, EOS/USD and BTC/USDT perpetual
 * contracts.
 *
 * @type {essence}
 */

var prototype = require('../models/essence');

module.exports = class extends prototype {

    constructor() {

        super();
        this.meta = {
            name: 'ByBit Driver by Event+',
            id: 'bdbe-101',
            version: 1,
            exchange: 'bybit',
            type: "exchange"
        }

    }

    init () {

        if ('store' in this.essence) {

            if ('keystore' in this.essence['store']) {

                if ('exchange' in this.essence['store']) {

                    if ('cache' in this.essence['store']) {

                        if ('commutator' in this.essence) {

                            if ('request' in this.essence['commutator']) {

                                if ('wss' in this.essence['commutator']) {

                                    let keystore = this.essence['store']['keystore'];
                                    let exchange = this.essence['store']['exchange'];
                                    let request = this.essence['commutator']['request'];
                                    let wss = this.essence['commutator']['wss'];
                                    let io = new wss(keystore.testnet ? 'wss://stream-testnet.bybit.com/realtime' : 'wss://stream.bybit.com/realtime');

                                    var buffer = [];
                                    var bufferInstrument = [];
                                    var bufferOrders = {asks: [], bids: []};

                                    request(`https://api.bybit.com/v2/public/kline/list?symbol=BTCUSD&interval=${exchange.exchange.period}&limit=${exchange.exchange.count}&from=${Math.round(parseInt(new Date().getTime()) / 1000 - (exchange.exchange.offset))}`, (error, response, body) => {

                                        if (response && response.statusCode == 200) {

                                            const data = JSON.parse(body);
                                            buffer = data.result;

                                        }


                                    });

                                    io.onopen = (event=null) => {
                                        io.send(JSON.stringify({
                                            "op": "subscribe",
                                            "args": [
                                                "klineV2.1.BTCUSD",
                                                "instrument_info.100ms.BTCUSD",
                                                "orderBookL2_25.BTCUSD"
                                            ]
                                        }));

                                        this.call('open', event);

                                    }

                                    io.onmessage = (event=null) => {

                                        const data = JSON.parse(event.data);

                                        if ('topic' in data) {

                                            switch (data.topic) {

                                                case 'instrument_info.100ms.BTCUSD':

                                                    if (data.type == 'snapshot') {

                                                        bufferInstrument = {
                                                            maxPrice24h: data.data.high_price_24h_e4 / 10000,
                                                            minPrice24h: data.data.low_price_24h_e4 / 10000,
                                                            changePrice24h: data.data.price_1h_pcnt_e6 / 1000000,
                                                            totalTurnover: data.data.turnover_24h_e8 / 100000000,
                                                            totalTurnover24h: data.data.total_turnover_e8 / 100000000,
                                                            volume24h: data.data.volume_24h,
                                                            openInterest: data.data.open_interest,
                                                            openValue: data.data.open_value_e8 / 100000000,
                                                            fundingRate: data.data.funding_rate_e6 / 1000000,
                                                            lastPrice: data.data.last_price_e4 / 10000
                                                        };

                                                        this.call('getInstrument', bufferInstrument);

                                                    } else if (data.type == 'delta') {

                                                        for (const iterator of data.data.update) {

                                                            for (const [name, value] of Object.entries(iterator)) {

                                                                bufferInstrument[name] = value;

                                                            }

                                                            this.call('getInstrument', bufferInstrument);

                                                        }



                                                    }

                                                    break;

                                                case 'orderBookL2_25.BTCUSD':

                                                    if (data.type == 'snapshot') {

                                                        for (const iterator of data.data) {
                                                            if (iterator.side == 'Buy') {
                                                                bufferOrders.asks.push([
                                                                    parseFloat(iterator.price),
                                                                    parseFloat(iterator.size),
                                                                ]);
                                                            } else {
                                                                bufferOrders.bids.push([
                                                                    parseFloat(iterator.price),
                                                                    parseFloat(iterator.size),
                                                                ]);
                                                            }
                                                        }

                                                        this.call('getOrderBook', {
                                                            asks: bufferOrders.asks,
                                                            bids: bufferOrders.bids
                                                        });

                                                    } else if (data.type == 'delta') {

                                                        for (const iterator of data.data.update) {

                                                            for (const i in bufferOrders.asks) {
                                                                if (bufferOrders.asks[i][0] == parseFloat(iterator.price)) {
                                                                    bufferOrders.asks[i][1] = parseFloat(iterator.size);
                                                                }
                                                            }

                                                            for (const i in bufferOrders.bids) {
                                                                if (bufferOrders.bids[i][0] == parseFloat(iterator.price)) {
                                                                    bufferOrders.bids[i][1] = parseFloat(iterator.size);
                                                                }
                                                            }

                                                        }

                                                        this.call('getOrderBook', {
                                                            asks: bufferOrders.asks,
                                                            bids: bufferOrders.bids
                                                        });

                                                    }

                                                    break;

                                                case 'klineV2.1.BTCUSD':

                                                    if (Symbol.iterator in Object(data.data)) {

                                                        for (const iterator of data.data) {
                                                            buffer.append(iterator, exchange.exchange.limit)
                                                        }

                                                    } else {
                                                        buffer.append(data.data, exchange.exchange.limit);
                                                    }


                                                    var chartData = [];

                                                    for(var i = 0; i < buffer.length; i++) {

                                                        if (buffer[i] === undefined) continue;
                                                        var bufferData = buffer[i];

                                                        chartData.append({
                                                            time: parseFloat('open_time' in bufferData ? bufferData.open_time : bufferData.end),
                                                            open: parseFloat(bufferData.open),
                                                            low: parseFloat(bufferData.low),
                                                            high: parseFloat(bufferData.high),
                                                            turnover: parseFloat(bufferData.turnover),
                                                            close: parseFloat(bufferData.close),
                                                            volume: parseFloat(bufferData.volume)
                                                        }, exchange.exchange.limit);

                                                    }

                                                    this.call('getChartForTradingview', chartData);
                                                    this.call('getChart', chartData);

                                            }

                                        }

                                        this.call('message', event);

                                    }

                                    this.call('init', true);

                                } else {
                                    throw 'No WSS commutator found for driver';
                                }

                            } else {
                                throw 'No request commutator found for driver';
                            }

                        } else {
                            throw 'No commutator found for driver';
                        }

                    } else {
                        throw 'No exchange object found for driver';
                    }

                } else {
                    throw 'No cache storage found for driver caches';
                }

            } else {
                throw 'No key storage found for driver';
            }

        } else {
            throw 'No storage found for driver';
        }

        // this.client = new this.websocket(this.keystore.bybit.testnet ? 'wss://stream-testnet.bybit.com/realtime' : 'wss://stream.bybit.com/realtime');
        // this.initial = (event) => {
        //
        //     const this_ = this;
        //     var buffer = [];
        //     var bufferObject = {}
        //
        //     request(`https://api.bybit.com/v2/public/kline/list?symbol=BTCUSD&interval=${this_.exchange.exchange.period}&limit=${this_.exchange.exchange.count}&from=${Math.round(parseInt(new Date().getTime()) / 1000 - (this_.exchange.exchange.offset))}`, function (error, response, body) {
        //         if (response && response.statusCode == 200) {
        //             const data = JSON.parse(body);
        //             buffer = data.result;
        //         }
        //     });

        //     this.client.onmessage = function (e) {
        //
        //         const data = JSON.parse(e.data);
        //
        //         if ('topic' in data && data.topic == 'instrument_info.100ms.BTCUSD') {
        //
        //             if ('update' in data.data) {
        //
        //                 for (const i in data.data.update) {
        //                     if (i in bufferObject) {
        //                         bufferObject[i] = data.data.update[i];
        //                     }
        //                 }
        //
        //                 this_.call('getInstrument', bufferObject);
        //
        //             } else {
        //                 this_.call('getInstrument', data.data);
        //                 bufferObject = data.data;
        //             }
        //
        //
        //         } else if ('topic' in data && data.topic == 'klineV2.1.BTCUSD') {
        //             if (buffer) {
        //
        //                 var chartData = [];
        //
        //                 for (const bufferData of data.data) {
        //                     buffer.push(bufferData);
        //                 }
        //
        //                 for (const bufferData of buffer) {
        //                     chartData.push({
        //                         time: 'open_time' in bufferData ? bufferData.open_time : bufferData.end,
        //                         open: bufferData.open,
        //                         low: bufferData.low,
        //                         high: bufferData.high,
        //                         turnover: bufferData.turnover,
        //                         close: bufferData.close,
        //                         volume: bufferData.volume
        //                     })
        //                 }
        //
        //                 this_.call('getChartForTradingview', chartData);
        //                 this_.call('getChart', chartData);
        //             }
        //         }
        //
        //     }
        //
        //     this.client.onopen = function (e) {
        //         this_.client.send(JSON.stringify({
        //             "op": "subscribe",
        //             "args": [
        //                 "klineV2.1.BTCUSD",
        //                 "instrument_info.100ms.BTCUSD"
        //             ]
        //         }));
        //     }
        // }

    }

}