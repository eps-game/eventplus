#!/usr/bin/env node

const async = require("async");
const cache = require("cache");
const c = new cache(15 * 60 * 1000);

module.exports = class {

    constructor(io=null, drivers={}, transports={}) {

        const this_ = this;

        this.actions = [];
        this.drivers = [];
        this.transports = [];
        this.data = {};
        this.io = io;

        // Load drivers
        for (const driver in drivers) {
            let object = drivers[driver];
            if ('meta' in object) {
                if ('exchange' in object.meta) {
                    this.drivers.push({
                        driver: object,
                        meta: object.meta
                    });
                }
            } else {
                throw `'${driver}' is not a driver`;
            }
        }

        // Load transports
        for (const transport in transports) {
            let object = transports[transport];
            if ('meta' in object) {
                if ('id' in object.meta) {
                    this.transports.push({
                        transport: object,
                        meta: object.meta
                    });
                }
            } else {
                throw `'${transport}' is not a transport`;
            }
        }

    }

    on (action='default', callback=null) {
        return this.actions.push({
            action: action,
            function: callback
        });
    }

    call (action='default', data) {
        for (const callback of this.actions) {
            if ( (action === callback.action) || ('*' === callback.action)) {
                try {
                    callback.function(data, action)
                } catch (e) {
                    console.error(e)
                }
            }
        }
    }

    init () {

        const this_ = this
        var transport_indicators = false;

        // Select transports
        for (const _ of this.transports) {
            if (_.meta.id == 'itbe-101') {
                transport_indicators = _.transport;
            }
        }

        if (transport_indicators) {
            this.call('init', true);
        } else {
            throw "Transport for indicators is not selected";
        }

        this.io.on('connection', function connection(ws) {

            // Setup drivers env
            for (const _ of this_.drivers) {

                // Send price
                _.driver.on('getChartForTradingview', function (e) {
                    _.driver.on('getChartForTradingview', (event) => {
                        ws.send(JSON.stringify({
                            response: 'chartData',
                            exchange: _.meta.exchange,
                            type: 'BARS',
                            chart: event
                        }));
                    });
                });

                // Send orders book
                _.driver.on('getOrderBook', (event) => {
                    ws.send(JSON.stringify({
                        response: 'ordersBookData',
                        exchange: _.meta.exchange,
                        book: event
                    }));
                });

                // Send markets
                _.driver.on('getMarkets', (event) => {
                    ws.send(JSON.stringify({
                        response: 'markets',
                        exchange: _.meta.exchange,
                        markets: event
                    }));
                });

                _.driver.call('markets');

                // Send indicators
                transport_indicators.on('*', (event, action) => {
                    if (!(action in ['init'])) {
                        if ('exchange' in event) {
                            ws.send(JSON.stringify({
                                response: 'chartData',
                                exchange: event.exchange.toLowerCase(),
                                type: action.toUpperCase(),
                                chart: event.chart
                            }));
                        }
                    }
                });

            }

        });

    }

}