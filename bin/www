#!/usr/bin/env node

module.exports = function (mysql, optionsHttp, optionsHttps) {

  /**
   * Module dependencies.
   */

  const express = require('../getaway/app')(mysql);
  const app = express.app;
  const debug = require('debug')('event:server');
  const http = require('http');
  const https = require('https');
  const fs = require('fs');

  if (('key' in optionsHttps && optionsHttps.key) && ('crt' in optionsHttps && optionsHttps.crt)) {

    const privateKey  = fs.readFileSync(optionsHttps.key, 'utf8');
    const certificate = fs.readFileSync(optionsHttps.crt, 'utf8');

  }

  /**
   * Create HTTP server.
   */

  var httpServer = http.createServer(app);
  var httpsServer = typeof privateKey !== "undefined" ? https.createServer({key: privateKey, cert: certificate}, app) : false;

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Installation of Http event handler
   */

  // HTTP
  httpServer.on('error', onError);
  httpServer.listen(normalizePort(optionsHttp.port || '3004'));

  // HTTPS
  if (httpsServer) {
    httpsServer.on('error', onError);
    httpsServer.listen(normalizePort(optionsHttps.port || '3006'));
  }

  return {
    http: httpServer,
    https: httpsServer,
    server: httpsServer ? httpsServer : httpServer,
    express: express
  };

};