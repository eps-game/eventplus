#!/usr/bin/env node

class essence {

    constructor() {

        this.actions = [];
        this.essence = {};
        this.store = {};

    }

    append (key='default', value='default') {
        if (key in this.store) {
            if (Array.isArray(this.store[key])) {
                this.store[key].push(value);
                this.store[key].sweep(214);
            } else {
                this.store[key] = [];
                this.store[key].push(value);
                this.store[key].sweep(214);
            }
        } else {
            this.store[key] = [];
            this.store[key].push(value);
            this.store[key].sweep(214);
        }
    }

    get (key='default', Default=undefined) {
        if (key in this.store) {
            return this.store[key]
        } else {
            return Default;
        }
    }

    put (key='default') {

        let values = Object.values(arguments);
            values.shift();
            values.sweep(214);

        // Assign objects
        for ( let i = 0; i < values.length; i ++ ) {
            if ( !(typeof values[i] === "object" && typeof values[i].__proto__.shift === "undefined") ) { break; }
            if ((i + 1) === values.length) {
                this.store[key] = Object.assign(...values)
                return;
            }
        }

        // Contact arrays
        for ( let i = 0; i < values.length; i ++ ) {
            if ( !Array.isArray(values[i]) ) { break; }
            if ((i + 1) === values.length) {
                this.store[key] = values[0].concat(...values);
                return;
            }
        }

        this.store[key] = values.join(' ');
        return;

    }

    on (action = 'default', callback = null) {
        return this.actions.push({
            action: action,
            function: callback
        });
    }

    call (action = 'default', data) {
        for (const callback of this.actions) {
            if ((action === callback.action) || ('*' === callback.action)) {
                try {
                    callback.function(data, action)
                } catch (e) {
                    console.error(e)
                }
            }
        }
    }

    use (essence='default', instance='default', object=Object) {

        if (!(essence in this.essence)) {this.essence[essence] = {} }
        this.essence[essence][instance] = object;

        this.call('setUse', {
            'use': {essence, instance},
            'object': object
        });

    }

    go (essence='default', instance=false, data=Object) {

        if (essence in this.essence) {
            if (instance === false) {
                return this.essence[essence];
            } else {
                if (instance in this.essence[essence]) {
                    try {
                        if (typeof this.essence[essence][instance] === 'function') {
                            return this.essence[essence][instance](data);
                        } else {
                            return this.essence[essence][instance];
                        }
                    } catch (e) {
                        console.error(e)
                    }
                }
            }
        }

    }

}

module.exports = essence;
