#!/usr/bin/env node

/**
 * Virtual machine - is a software and/or hardware system emulating hardware of some platform (target - target or guest
 * platform) and executing programs for target platform on host platform (host - host, host platform) or virtualizing
 * some platform and creating on it environments isolating from each other programs; also specification of some
 * computing environment (for example: "virtual machine of programming language NodeJS").
 *
 * The virtual machine executes
 * some machine independent code.
 *
 * @type {essence}
 */

var prototype = require('../models/essence');

module.exports = class extends prototype{

    constructor() {

        super();

        this.meta = {
            id: 'vmbbe-101',
            name: "Virtual Machine Bridge by Event+",
            version: 1
        };

    }

    init () {

        if ('private' in this.essence) {

            if ('environment' in this.essence['private']) {

                var alias = this.essence['private']['alias'];
                var context = this.essence['public'];
                var environment = this.essence['private']['environment'];
                var loader = this.essence['private']['fs'].readFileSync('./virtual/loader', 'utf8');
                var firmware = this.essence['private']['fs'].readFileSync('./firmware', 'utf8');
                var sync = this.essence['private']['fs'].readFileSync('./virtual/sync', 'utf8');
                var signal = this.essence['private']['fs'].readFileSync('./virtual/signal', 'utf8');

                // If aliases are specified, the following code will be processed
                if (alias) {
                    firmware = firmware.replaceObject(alias);
                }

                new Promise((resolve, reject) => {

                    environment.createContext(context);
                    environment.runInContext(loader, context);
                    environment.runInContext(signal, context);
                    environment.runInContext(sync, context);
                    environment.runInContext(firmware, context);

                }).catch((event) => {
                    this.call('error', event)
                });

                // Watching the changes in the file
                this.essence['private']['fs'].watch('./firmware', { encoding: 'utf8' }, (eventType, filename) => {
                    if (filename) {

                        var firmware = this.essence['private']['fs'].readFileSync('./firmware', 'utf8');

                        // If aliases are specified, the following code will be processed
                        if (alias) {
                            firmware = firmware.replaceObject(alias);
                        }

                        environment.createContext(context);
                        environment.runInContext(firmware, context);

                    }
                });

                this.on ('*',  (event, action) => {
                    if (!(['boot', 'init', 'error', 'context', 'execute', 'done'].includes(action))) {
                        new Promise((resolve, reject) => {

                            context.__prop__ = event.event;
                            context.__sender__ = event.sender;
                            context.__action__ = action;

                            this.call('context', context)

                            for ( let i = 0; i < context.__traps__.length; i ++ ) {

                                let trap = context.__traps__[i];

                                if ('filter' in trap) {
                                    if (trap.filter(event.sender, action, event.event) === true) {
                                        trap.put(action, event.event);
                                        if ('step' in trap) {
                                            trap.step();
                                        }
                                        if ('watch' in trap && action in trap.watch) {
                                            if (typeof trap.watch[action] === "function") {
                                                trap.watch[action](event.event);
                                            }
                                        }
                                    }
                                } else {
                                    trap.put(action, event.event);
                                    if ('step' in trap) {
                                        trap.step();
                                    }
                                    if ('watch' in trap && action in trap.watch) {
                                        if (typeof trap.watch[action] === "function") {
                                            trap.watch[action](event.event);
                                        }
                                    }
                                }


                            }

                            context.__sender__ = null;
                            context.__prop__ = null;
                            context.__action__ = null;

                            this.call('done', context)

                        }).catch((event) => {
                            this.call('error', event)
                        });

                        this.call('execute', context)

                    }
                });

                this.call('init', true);
                this.call('boot', true);
            }

        } else {
            throw ``;
        }

    }

}