#!/usr/bin/env node

/**
 * Virtual machine - is a software and/or hardware system emulating hardware of some platform (target - target or guest platform)
 * and executing programs for target platform on host platform (host - host, host platform) or virtualizing some
 * platform and creating on
 * it environments isolating from each other programs;
 * also specification of some computing environment (for example: "virtual machine of programming language NodeJS").
 *
 * The virtual machine executes
 * some machine independent code.
 *
 * @type {essence}
 */

var prototype = require('../models/essence');

module.exports = class extends prototype{

    constructor() {

        super();

        this.meta = {
            id: 'vmbbe-101',
            name: "Virtual Machine Bridge by Event+",
            version: 1
        };

    }

    init () {

        if ('private' in this.essence) {

            if ('environment' in this.essence['private']) {

                var context = this.essence['public'];
                var environment = this.essence['private']['environment'];
                var bin = this.essence['private']['fs'].readFileSync('./virtual/bin', 'utf8');
                var execute = this.essence['private']['fs'].readFileSync('./virtual/execute', 'utf8');

                new Promise((resolve, reject) => {

                    environment.createContext(context);
                    environment.runInContext(bin, context);

                }).catch((event) => {
                    this.call('error', event)
                });

                this.on ('*',  (event, action) => {
                    if (!(['init', 'error', 'context', 'execute'].includes(action))) {
                        new Promise((resolve, reject) => {

                            environment.runInContext(execute.replaceObject({
                                name: action,
                                data: JSON.stringify(event)
                            }), context);

                            this.call('context', context)

                        }).catch((event) => {
                            this.call('error', event)
                        });

                        this.call('execute', context)

                    }
                });

                this.call('init', true);
                this.call('boot', true);
            }

        } else {
            throw ``;
        }

    }

}